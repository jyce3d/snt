<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:s="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost/sntdb" />
		<property name="username" value="user" />
		<property name="password" value="password" />
	</bean>	
	
	<!--  the LocalSessionFactoryBean in hibernate >=3.1 supports XML or annotated entities
	ici on travaille en annotation -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="be.sdlg.snt.model" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop> 		 <!-- TODO:Remove in production environment -->
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<!--  <prop key="hibernate.current_session_context_class">thread</prop>-->	
				<prop key="hibernate.validator.apply_to_ddl">false</prop> 
				<prop key="hibernate.validator.autoregister_listeners">false</prop>		
				<prop key="hibernate.hbm2ddl.auto">update</prop>	<!-- dangerous must be replaced by update -->
			</props>
		</property>
		
	</bean>
		<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
		<context:component-scan base-package="be.sdlg.snt" />
	
	<!-- déclaration du Transaction Manager qui sera utilisé par Spring, ici hibernate3 puisque l'on travaille avec hibernate -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<tx:annotation-driven transaction-manager = "transactionManager" />
				<!-- Security -->
    <s:global-method-security secured-annotations="enabled" />
	<bean id="userDetailsService" class="be.sdlg.snt.impl.UserDetailsServiceImpl">
		<property name="dbUserDao" ref="userDao" />
  	</bean> 
	
	<s:http auto-config="true" use-expressions="false">
	    <s:form-login login-processing-url="/j_snt_security_check" login-page="/login.htm" authentication-failure-url="/login.htm?login_error=t"
	                default-target-url="/secure/studyList.htm" />
		<s:intercept-url pattern="/secure/**" access="ROLE_USER" />
		<s:intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
	</s:http>	
	<!-- property file sntConfig -->
	<bean id="sntConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="locations" value="classpath*:/snt.properties"/>
	</bean>

	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>
	<bean id="saltSource" class="org.springframework.security.authentication.dao.SystemWideSaltSource" depends-on="sntConfig">
		<property name="systemWideSalt" value="salt" />		
	</bean>
	
	<s:authentication-manager>
	 	<s:authentication-provider user-service-ref="userDetailsService">
	 	   <s:password-encoder ref="passwordEncoder">                
            	<s:salt-source ref="saltSource"/>
           </s:password-encoder>
		</s:authentication-provider>
	</s:authentication-manager>  
	<!--  MVC -->
		<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
		<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
	</bean>
	<bean class="org.springframework.web.servlet.view.XmlViewResolver">
	     <property name="location">
	        <value>/WEB-INF/spring/spring-pdf-views.xml</value>
	     </property>
	     <property name="order" value="0" />
	</bean>
	
	
	<bean  id="messageSource"  class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="/resources/messages" />
	</bean>
	
	<bean id="jsonConverter"
    	class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
    <property name="prefixJson" value="false" />
    <property name="supportedMediaTypes" value="application/json" />
  
	</bean>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/> 
	<!-- Advice on a controller must be declare in the same spring context! otherwise the annotation @controller is lost -->
	<bean id="controllerAdvice" class="be.sdlg.snt.ControllerAdvice" />
	

</beans>
